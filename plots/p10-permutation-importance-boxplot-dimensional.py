import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
# gnb x1 5.551115123125783e-17
# gnb x2 5.551115123125783e-17
# knn x1 0.20800000000000007
# knn x2 -1.1102230246251565e-16
# rfc x1 0.40599999999999997
# rfc x2 -1.1102230246251565e-16
def cm2inch(*tupl):
    inch = 2.54
    if isinstance(tupl[0], tuple):
        return tuple(i/inch for i in tupl[0])
    else:
        return tuple(i/inch for i in tupl)



columns = ['vals', 'labels']
df = pd.DataFrame([
    [0.326, 'x1_knn_dummy'],
    [0.2719999999999999, 'x1_knn_dummy'],
    [0.20399999999999996, 'x1_knn_dummy'],
    [0.22799999999999987, 'x1_knn_dummy'],
    [0.15600000000000003, 'x1_knn_dummy'],
    [1.1102230246251565 * 10 ** -16, 'x2_knn_dummy'],
    [1.1102230246251565 * 10 ** -16, 'x2_knn_dummy'],
    [1.1102230246251565 * 10 ** -16, 'x2_knn_dummy'],
    [1.1102230246251565 * 10 ** -16, 'x2_knn_dummy'],
    [1.1102230246251565 * 10 ** -16, 'x2_knn_dummy'],
    [0.4659999999999999, 'x1_rfc_dummy'],
    [0.45599999999999996, 'x1_rfc_dummy'],
    [0.45599999999999985, 'x1_rfc_dummy'],
    [0.5079999999999999, 'x1_rfc_dummy'],
    [0.45399999999999996, 'x1_rfc_dummy'],
    [-2.220446049250313 * 10 ** -16, 'x2_rfc_dummy'],
    [2.220446049250313 * 10 ** -16, 'x2_rfc_dummy'],
    [2.220446049250313 * 10 ** -16, 'x2_rfc_dummy'],
    [-2.220446049250313 * 10 ** -16, 'x2_rfc_dummy'],
    [-2.220446049250313 * 10 ** -16, 'x2_rfc_dummy'],
    [-0.03799999999999998, 'x1_gnb_dummy'],
    [0.02799999999999997, 'x1_gnb_dummy'],
    [5.551115123125783 * 10 ** -17, 'x1_gnb_dummy'],
    [-5.551115123125783 * 10 ** -17, 'x1_gnb_dummy'],
    [-5.551115123125783 * 10 ** -17, 'x1_gnb_dummy'],
    [5.551115123125783 * 10 ** -17, 'x2_gnb_dummy'],
    [-5.551115123125783 * 10 ** -17, 'x2_gnb_dummy'],
    [5.551115123125783 * 10 ** -17, 'x2_gnb_dummy'],
    [-5.551115123125783 * 10 ** -17, 'x2_gnb_dummy'],
    [-5.551115123125783 * 10 ** -17, 'x2_gnb_dummy'],
    [0.1399999999999999, 'x1_knn_onehot'],
    [0.12999999999999995, 'x1_knn_onehot'],
    [0.2639999999999999, 'x1_knn_onehot'],
    [0.2839999999999999, 'x1_knn_onehot'],
    [0.13000000000000012, 'x1_knn_onehot'],
    [0.0, 'x2_knn_onehot'],
    [1.1102230246251565 * 10 ** -16, 'x2_knn_onehot'],
    [1.1102230246251565 * 10 ** -16, 'x2_knn_onehot'],
    [1.1102230246251565 * 10 ** -16, 'x2_knn_onehot'],
    [0.0, 'x2_knn_onehot'],
    [0.454, 'x1_rfc_onehot'],
    [0.44599999999999995, 'x1_rfc_onehot'],
    [0.442, 'x1_rfc_onehot'],
    [0.38, 'x1_rfc_onehot'],
    [0.40199999999999997, 'x1_rfc_onehot'],
    [2.220446049250313 * 10 ** -16, 'x2_rfc_onehot'],
    [-2.220446049250313 * 10 ** -16, 'x2_rfc_onehot'],
    [-1.1102230246251565 * 10 ** -16, 'x2_rfc_onehot'],
    [-1.1102230246251565 * 10 ** -16, 'x2_rfc_onehot'],
    [-1.1102230246251565 * 10 ** -16, 'x2_rfc_onehot'],
    [0.020000000000000073, 'x1_gnb_onehot'],
    [0.132, 'x1_gnb_onehot'],
    [0.02800000000000008, 'x1_gnb_onehot'],
    [5.551115123125783 * 10 ** -17, 'x1_gnb_onehot'],
    [0.012000000000000066, 'x1_gnb_onehot'],
    [5.551115123125783 * 10 ** -17, 'x2_gnb_onehot'],
    [1.1102230246251565 * 10 ** -16, 'x2_gnb_onehot'],
    [5.551115123125783 * 10 ** -17, 'x2_gnb_onehot'],
    [5.551115123125783 * 10 ** -17, 'x2_gnb_onehot'],
    [5.551115123125783 * 10 ** -17, 'x2_gnb_onehot'],
    [0.43599999999999994, 'x1_knn_difference'],
    [0.4260000000000001, 'x1_knn_difference'],
    [0.46199999999999997, 'x1_knn_difference'],
    [0.47, 'x1_knn_difference'],
    [0.4959999999999999, 'x1_knn_difference'],
    [-2.220446049250313 * 10 ** -16, 'x2_knn_difference'],
    [-1.1102230246251565 * 10 ** -16, 'x2_knn_difference'],
    [-2.220446049250313 * 10 ** -16, 'x2_knn_difference'],
    [-2.220446049250313 * 10 ** -16, 'x2_knn_difference'],
    [0.0, 'x2_knn_difference'],
    [0.44800000000000006, 'x1_rfc_difference'],
    [0.454, 'x1_rfc_difference'],
    [0.43999999999999984, 'x1_rfc_difference'],
    [0.42400000000000004, 'x1_rfc_difference'],
    [0.43799999999999994, 'x1_rfc_difference'],
    [0.0, 'x2_rfc_difference'],
    [2.220446049250313 * 10 ** -16, 'x2_rfc_difference'],
    [2.220446049250313 * 10 ** -16, 'x2_rfc_difference'],
    [-1.1102230246251565 * 10 ** -16, 'x2_rfc_difference'],
    [2.220446049250313 * 10 ** -16, 'x2_rfc_difference'],
    [5.551115123125783 * 10 ** -17, 'x1_gnb_difference'],
    [-5.551115123125783 * 10 ** -17, 'x1_gnb_difference'],
    [-0.07599999999999996, 'x1_gnb_difference'],
    [-5.551115123125783 * 10 ** -17, 'x1_gnb_difference'],
    [0.06799999999999995, 'x1_gnb_difference'],
    [5.551115123125783 * 10 ** -17, 'x2_gnb_difference'],
    [-5.551115123125783 * 10 ** -17, 'x2_gnb_difference'],
    [-5.551115123125783 * 10 ** -17, 'x2_gnb_difference'],
    [-5.551115123125783 * 10 ** -17, 'x2_gnb_difference'],
    [0.0, 'x2_gnb_difference'],
    [0.338, 'x1_knn_basen'],
    [0.338, 'x1_knn_basen'],
    [0.28800000000000003, 'x1_knn_basen'],
    [0.35799999999999993, 'x1_knn_basen'],
    [0.266, 'x1_knn_basen'],
    [1.1102230246251565 * 10 ** -16, 'x2_knn_basen'],
    [-1.1102230246251565 * 10 ** -16, 'x2_knn_basen'],
    [-1.1102230246251565 * 10 ** -16, 'x2_knn_basen'],
    [-1.1102230246251565 * 10 ** -16, 'x2_knn_basen'],
    [1.1102230246251565 * 10 ** -16, 'x2_knn_basen'],
    [0.44800000000000006, 'x1_rfc_basen'],
    [0.45599999999999985, 'x1_rfc_basen'],
    [0.402, 'x1_rfc_basen'],
    [0.4579999999999999, 'x1_rfc_basen'],
    [0.44799999999999984, 'x1_rfc_basen'],
    [-1.1102230246251565 * 10 ** -16, 'x2_rfc_basen'],
    [2.220446049250313 * 10 ** -16, 'x2_rfc_basen'],
    [-1.1102230246251565 * 10 ** -16, 'x2_rfc_basen'],
    [2.220446049250313 * 10 ** -16, 'x2_rfc_basen'],
    [-2.220446049250313 * 10 ** -16, 'x2_rfc_basen'],
    [5.551115123125783 * 10 ** -17, 'x1_gnb_basen'],
    [0.013999999999999957, 'x1_gnb_basen'],
    [0.13800000000000007, 'x1_gnb_basen'],
    [-0.0040000000000000036, 'x1_gnb_basen'],
    [0.06400000000000006, 'x1_gnb_basen'],
    [5.551115123125783 * 10 ** -17, 'x2_gnb_basen'],
    [-1.1102230246251565 * 10 ** -16, 'x2_gnb_basen'],
    [-1.1102230246251565 * 10 ** -16, 'x2_gnb_basen'],
    [5.551115123125783 * 10 ** -17, 'x2_gnb_basen'],
    [0.0, 'x2_gnb_basen'],
    [0.28800000000000003, 'x1_knn_binary'],
    [0.31200000000000006, 'x1_knn_binary'],
    [0.22600000000000003, 'x1_knn_binary'],
    [0.19399999999999995, 'x1_knn_binary'],
    [0.37799999999999995, 'x1_knn_binary'],
    [-1.1102230246251565 * 10 ** -16, 'x2_knn_binary'],
    [1.1102230246251565 * 10 ** -16, 'x2_knn_binary'],
    [1.1102230246251565 * 10 ** -16, 'x2_knn_binary'],
    [-1.1102230246251565 * 10 ** -16, 'x2_knn_binary'],
    [-1.1102230246251565 * 10 ** -16, 'x2_knn_binary'],
    [0.4119999999999998, 'x1_rfc_binary'],
    [0.346, 'x1_rfc_binary'],
    [0.40599999999999997, 'x1_rfc_binary'],
    [0.35400000000000004, 'x1_rfc_binary'],
    [0.382, 'x1_rfc_binary'],
    [2.220446049250313 * 10 ** -16, 'x2_rfc_binary'],
    [-1.1102230246251565 * 10 ** -16, 'x2_rfc_binary'],
    [-1.1102230246251565 * 10 ** -16, 'x2_rfc_binary'],
    [-1.1102230246251565 * 10 ** -16, 'x2_rfc_binary'],
    [-1.1102230246251565 * 10 ** -16, 'x2_rfc_binary'],
    [-0.028000000000000025, 'x1_gnb_binary'],
    [0.007999999999999896, 'x1_gnb_binary'],
    [5.551115123125783 * 10 ** -17, 'x1_gnb_binary'],
    [0.004000000000000059, 'x1_gnb_binary'],
    [0.028000000000000025, 'x1_gnb_binary'],
    [5.551115123125783 * 10 ** -17, 'x2_gnb_binary'],
    [-1.1102230246251565 * 10 ** -16, 'x2_gnb_binary'],
    [5.551115123125783 * 10 ** -17, 'x2_gnb_binary'],
    [5.551115123125783 * 10 ** -17, 'x2_gnb_binary'],
    [-5.551115123125783 * 10 ** -17, 'x2_gnb_binary'],
    [0.4779999999999999, 'x1_knn_helmert'],
    [0.43999999999999984, 'x1_knn_helmert'],
    [0.42199999999999993, 'x1_knn_helmert'],
    [0.43799999999999994, 'x1_knn_helmert'],
    [0.42199999999999993, 'x1_knn_helmert'],
    [-2.220446049250313 * 10 ** -16, 'x2_knn_helmert'],
    [2.220446049250313 * 10 ** -16, 'x2_knn_helmert'],
    [2.220446049250313 * 10 ** -16, 'x2_knn_helmert'],
    [2.220446049250313 * 10 ** -16, 'x2_knn_helmert'],
    [2.220446049250313 * 10 ** -16, 'x2_knn_helmert'],
    [0.48199999999999993, 'x1_rfc_helmert'],
    [0.41999999999999993, 'x1_rfc_helmert'],
    [0.45199999999999996, 'x1_rfc_helmert'],
    [0.5040000000000001, 'x1_rfc_helmert'],
    [0.44999999999999996, 'x1_rfc_helmert'],
    [-2.220446049250313 * 10 ** -16, 'x2_rfc_helmert'],
    [2.220446049250313 * 10 ** -16, 'x2_rfc_helmert'],
    [-2.220446049250313 * 10 ** -16, 'x2_rfc_helmert'],
    [0.0, 'x2_rfc_helmert'],
    [-2.220446049250313 * 10 ** -16, 'x2_rfc_helmert'],
    [-5.551115123125783 * 10 ** -17, 'x1_gnb_helmert'],
    [0.03199999999999997, 'x1_gnb_helmert'],
    [5.551115123125783 * 10 ** -17, 'x1_gnb_helmert'],
    [5.551115123125783 * 10 ** -17, 'x1_gnb_helmert'],
    [5.551115123125783 * 10 ** -17, 'x1_gnb_helmert'],
    [-5.551115123125783 * 10 ** -17, 'x2_gnb_helmert'],
    [-5.551115123125783 * 10 ** -17, 'x2_gnb_helmert'],
    [5.551115123125783 * 10 ** -17, 'x2_gnb_helmert'],
    [5.551115123125783 * 10 ** -17, 'x2_gnb_helmert'],
    [5.551115123125783 * 10 ** -17, 'x2_gnb_helmert'],
    [0.31, 'x1_knn_sum'],
    [0.36, 'x1_knn_sum'],
    [0.244, 'x1_knn_sum'],
    [0.11400000000000005, 'x1_knn_sum'],
    [0.36600000000000005, 'x1_knn_sum'],
    [1.1102230246251565 * 10 ** -16, 'x2_knn_sum'],
    [-1.1102230246251565 * 10 ** -16, 'x2_knn_sum'],
    [-1.1102230246251565 * 10 ** -16, 'x2_knn_sum'],
    [-1.1102230246251565 * 10 ** -16, 'x2_knn_sum'],
    [-1.1102230246251565 * 10 ** -16, 'x2_knn_sum'],
    [0.404, 'x1_rfc_sum'],
    [0.484, 'x1_rfc_sum'],
    [0.40800000000000003, 'x1_rfc_sum'],
    [0.364, 'x1_rfc_sum'],
    [0.45599999999999996, 'x1_rfc_sum'],
    [-1.1102230246251565 * 10 ** -16, 'x2_rfc_sum'],
    [-2.220446049250313 * 10 ** -16, 'x2_rfc_sum'],
    [-1.1102230246251565 * 10 ** -16, 'x2_rfc_sum'],
    [-1.1102230246251565 * 10 ** -16, 'x2_rfc_sum'],
    [-2.220446049250313 * 10 ** -16, 'x2_rfc_sum'],
    [0.014000000000000012, 'x1_gnb_sum'],
    [-0.023999999999999966, 'x1_gnb_sum'],
    [5.551115123125783 * 10 ** -17, 'x1_gnb_sum'],
    [-0.14600000000000002, 'x1_gnb_sum'],
    [-5.551115123125783 * 10 ** -17, 'x1_gnb_sum'],
    [-5.551115123125783 * 10 ** -17, 'x2_gnb_sum'],
    [-5.551115123125783 * 10 ** -17, 'x2_gnb_sum'],
    [5.551115123125783 * 10 ** -17, 'x2_gnb_sum'],
    [-5.551115123125783 * 10 ** -17, 'x2_gnb_sum'],
    [-5.551115123125783 * 10 ** -17, 'x2_gnb_sum'],
], columns=columns)

data_dummy_columns = ['x1_knn','x2_knn','x1_rfc','x2_rfc','x1_gnb','x2_gnb']
data_dummy = [
[0.326, 1.1102230246251565 * 10 ** -16, 0.4659999999999999, -2.220446049250313 * 10 ** -16, -0.03799999999999998, 5.551115123125783 * 10 ** -17 ],
[0.2719999999999999, 1.1102230246251565 * 10 ** -16, 0.45599999999999996, 2.220446049250313 * 10 ** -16, 0.02799999999999997, -5.551115123125783 * 10 ** -17 ],
[0.20399999999999996, 1.1102230246251565 * 10 ** -16, 0.45599999999999985, 2.220446049250313 * 10 ** -16, 5.551115123125783 * 10 ** -17, 5.551115123125783 * 10 ** -17],
[0.22799999999999987, 1.1102230246251565 * 10 ** -16, 0.5079999999999999, -2.220446049250313 * 10 ** -16, -5.551115123125783 * 10 ** -17, -5.551115123125783 * 10 ** -17],
[0.15600000000000003, 1.1102230246251565 * 10 ** -16, 0.45399999999999996, -2.220446049250313 * 10 ** -16, -5.551115123125783 * 10 ** -17, -5.551115123125783 * 10 ** -17]
]
df_dummy = pd.DataFrame(data_dummy, columns=data_dummy_columns)

data_onehot_columns = ['x1_knn','x2_knn','x1_rfc','x2_rfc','x1_gnb','x2_gnb']
data_onehot = [
[0.1399999999999999,0.0,0.454,2.220446049250313 * 10 ** -16,0.020000000000000073,5.551115123125783 * 10 ** -17],
[0.12999999999999995,1.1102230246251565 * 10 ** -16,0.44599999999999995,-2.220446049250313 * 10 ** -16,0.132,1.1102230246251565 * 10 ** -16],
[0.2639999999999999,1.1102230246251565 * 10 ** -16,0.442,-1.1102230246251565 * 10 ** -16,0.02800000000000008,5.551115123125783 * 10 ** -17],
[0.2839999999999999,1.1102230246251565 * 10 ** -16,0.38,-1.1102230246251565 * 10 ** -16,5.551115123125783 * 10 ** -17,5.551115123125783 * 10 ** -17],
[0.13000000000000012,0.0,0.40199999999999997,-1.1102230246251565 * 10 ** -16,0.012000000000000066,5.551115123125783 * 10 ** -17]
]
df_onehot = pd.DataFrame(data_onehot, columns=data_onehot_columns)

data_difference_columns = ['x1_knn','x2_knn','x1_rfc','x2_rfc','x1_gnb','x2_gnb']
data_difference = [
[0.43599999999999994,-2.220446049250313 * 10 ** -16,0.44800000000000006,0.0,5.551115123125783 * 10 ** -17,5.551115123125783 * 10 ** -17],
[0.4260000000000001,-1.1102230246251565 * 10 ** -16,0.454,2.220446049250313 * 10 ** -16,-5.551115123125783 * 10 ** -17,-5.551115123125783 * 10 ** -17],
[0.46199999999999997,-2.220446049250313 * 10 ** -16,0.43999999999999984,2.220446049250313 * 10 ** -16,-0.07599999999999996,-5.551115123125783 * 10 ** -17],
[0.47,-2.220446049250313 * 10 ** -16,0.42400000000000004,-1.1102230246251565 * 10 ** -16,-5.551115123125783 * 10 ** -17,-5.551115123125783 * 10 ** -17],
[0.4959999999999999,0.0,0.43799999999999994,2.220446049250313 * 10 ** -16,0.06799999999999995,0.0]
]
df_difference = pd.DataFrame(data_difference, columns=data_difference_columns)

data_basen_columns = ['x1_knn','x2_knn','x1_rfc','x2_rfc','x1_gnb','x2_gnb']
data_basen = [
[0.338, 1.1102230246251565 * 10 ** -16,0.44800000000000006,-1.1102230246251565 * 10 ** -16,5.551115123125783 * 10 ** -17,5.551115123125783 * 10 ** -17],
[0.338, -1.1102230246251565 * 10 ** -16,0.45599999999999985,2.220446049250313 * 10 ** -16,0.013999999999999957,-1.1102230246251565 * 10 ** -16],
[0.28800000000000003, -1.1102230246251565 * 10 ** -16,0.402,-1.1102230246251565 * 10 ** -16,0.13800000000000007,-1.1102230246251565 * 10 ** -16],
[0.35799999999999993, -1.1102230246251565 * 10 ** -16,0.4579999999999999,2.220446049250313 * 10 ** -16,-0.0040000000000000036,5.551115123125783 * 10 ** -17],
[0.266, 1.1102230246251565 * 10 ** -16,0.44799999999999984,-2.220446049250313 * 10 ** -16,0.06400000000000006,0.0]
]
df_basen = pd.DataFrame(data_basen, columns=data_basen_columns)

data_binary_columns = ['x1_knn','x2_knn','x1_rfc','x2_rfc','x1_gnb','x2_gnb']
data_binary = [
[0.28800000000000003,-1.1102230246251565 * 10 ** -16,0.4119999999999998,2.220446049250313 * 10 ** -16,-0.028000000000000025,5.551115123125783 * 10 ** -17],
[0.31200000000000006,1.1102230246251565 * 10 ** -16,0.346,-1.1102230246251565 * 10 ** -16,0.007999999999999896,-1.1102230246251565 * 10 ** -16],
[0.22600000000000003,1.1102230246251565 * 10 ** -16,0.40599999999999997,-1.1102230246251565 * 10 ** -16,5.551115123125783 * 10 ** -17,5.551115123125783 * 10 ** -17],
[0.19399999999999995,-1.1102230246251565 * 10 ** -16,0.35400000000000004,-1.1102230246251565 * 10 ** -16,0.004000000000000059,5.551115123125783 * 10 ** -17],
[0.37799999999999995,-1.1102230246251565 * 10 ** -16,0.382,-1.1102230246251565 * 10 ** -16,0.028000000000000025,-5.551115123125783 * 10 ** -17]
]
df_binary = pd.DataFrame(data_binary, columns=data_binary_columns)

data_helmert_columns = ['x1_knn','x2_knn','x1_rfc','x2_rfc','x1_gnb','x2_gnb']
data_helmert = [
[0.4779999999999999,-2.220446049250313 * 10 ** -16,0.48199999999999993,-2.220446049250313 * 10 ** -16,-5.551115123125783 * 10 ** -17,-5.551115123125783 * 10 ** -17],
[0.43999999999999984,2.220446049250313 * 10 ** -16,0.41999999999999993,2.220446049250313 * 10 ** -16,0.03199999999999997,-5.551115123125783 * 10 ** -17],
[0.42199999999999993,2.220446049250313 * 10 ** -16,0.45199999999999996,-2.220446049250313 * 10 ** -16,5.551115123125783 * 10 ** -17,5.551115123125783 * 10 ** -17],
[0.43799999999999994,2.220446049250313 * 10 ** -16,0.5040000000000001,0.0,5.551115123125783 * 10 ** -17,5.551115123125783 * 10 ** -17],
[0.42199999999999993,2.220446049250313 * 10 ** -16,0.44999999999999996,-2.220446049250313 * 10 ** -16,5.551115123125783 * 10 ** -17,5.551115123125783 * 10 ** -17]
]
df_helmert = pd.DataFrame(data_helmert, columns=data_helmert_columns)

data_sum_columns = ['x1_knn','x2_knn','x1_rfc','x2_rfc','x1_gnb','x2_gnb']
data_sum = [
[0.31,1.1102230246251565 * 10 ** -16,0.404,-1.1102230246251565 * 10 ** -16,0.014000000000000012,-5.551115123125783 * 10 ** -17],
[0.36,-1.1102230246251565 * 10 ** -16,0.484,-2.220446049250313 * 10 ** -16,-0.023999999999999966,-5.551115123125783 * 10 ** -17],
[0.244,-1.1102230246251565 * 10 ** -16,0.40800000000000003,-1.1102230246251565 * 10 ** -16,5.551115123125783 * 10 ** -17,5.551115123125783 * 10 ** -17],
[0.11400000000000005,-1.1102230246251565 * 10 ** -16,0.364,-1.1102230246251565 * 10 ** -16,-0.14600000000000002,-5.551115123125783 * 10 ** -17],
[0.36600000000000005,-1.1102230246251565 * 10 ** -16,0.45599999999999996,-2.220446049250313 * 10 ** -16,-5.551115123125783 * 10 ** -17,-5.551115123125783 * 10 ** -17],
]
df_sum = pd.DataFrame(data_sum, columns=data_sum_columns)

# fig, ax = plt.subplots()
# for position, column in enumerate(columns_my_order):
#     ax.boxplot(df['vals'].loc[df['labels'] == column], positions=[position])
#
#
# ax.set_xticks(range(position+1))
# ax.set_xticklabels(columns_my_order)
# ax.set_xlim(xmin=-0.5)
# plt.xticks(rotation='vertical')
# plt.show()

df_dummy.boxplot(rot=90, figsize=cm2inch(8, 8))
# df_onehot.boxplot(rot=90, figsize=cm2inch(8, 8))
# df_basen.boxplot(rot=90, figsize=cm2inch(8, 8))
# df_binary.boxplot(rot=90, figsize=cm2inch(8, 8))
# df_difference.boxplot(rot=90, figsize=cm2inch(8, 8))
# df_helmert.boxplot(rot=90, figsize=cm2inch(8, 8))
# df_sum.boxplot(rot=90, figsize=cm2inch(8, 8))
plt.subplots_adjust(bottom=0.2)
plt.ylim(-0.1, 0.5)
# plt.show()
plt.savefig("./images/p10-permutation-importance-boxplot-dummy.svg")

# ax = df.boxplot(
# column='permutation importance',
# by='labels',
# figsize=cm2inch(14.69, 10.5),
# rot=90,
# fontsize=6
# )
#
# ax.set_xlabel('')
# ax.set_xticklabels(columns_my_order)
#
# plt.suptitle("")
# plt.subplots_adjust(bottom=0.3)
#
# plt.show()
# plt.savefig("./images/p10-permutation-importance-boxplot-dimensional.svg")
