import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

def cm2inch(*tupl):
    inch = 2.54
    if isinstance(tupl[0], tuple):
        return tuple(i/inch for i in tupl[0])
    else:
        return tuple(i/inch for i in tupl)



columns = ['permutation importance', 'labels']
df = pd.DataFrame([
[0.4868686868686869, 'x1_knn_dummy'],
[0.4507070707070707, 'x1_knn_dummy'],
[0.4709090909090909, 'x1_knn_dummy'],
[0.4743434343434344, 'x1_knn_dummy'],
[0.48202020202020207, 'x1_knn_dummy'],
[-1.1102230246251565 * 10 ** -16, 'x2_knn_dummy'],
[2.220446049250313 * 10 ** -16, 'x2_knn_dummy'],
[-2.220446049250313 * 10 ** -16, 'x2_knn_dummy'],
[-2.220446049250313 * 10 ** -16, 'x2_knn_dummy'],
[2.220446049250313 * 10 ** -16, 'x2_knn_dummy'],

[0.498989898989899, 'x1_rfc_dummy'],
[0.48484848484848486, 'x1_rfc_dummy'],
[0.49696969696969684, 'x1_rfc_dummy'],
[0.5006060606060606, 'x1_rfc_dummy'],
[0.5006060606060607, 'x1_rfc_dummy'],
[0.0, 'x2_rfc_dummy'],
[0.0, 'x2_rfc_dummy'],
[0.0, 'x2_rfc_dummy'],
[0.0, 'x2_rfc_dummy'],
[0.0, 'x2_rfc_dummy'],

[0.03959595959595957, 'x1_gnb_dummy'],
[0.07515151515151519, 'x1_gnb_dummy'],
[0.07313131313131316, 'x1_gnb_dummy'],
[0.09171717171717175, 'x1_gnb_dummy'],
[0.10545454545454541, 'x1_gnb_dummy'],
[5.551115123125783 * 10 ** -17, 'x2_gnb_dummy'],
[0.0, 'x2_gnb_dummy'],
[0.0, 'x2_gnb_dummy'],
[0.0, 'x2_gnb_dummy'],
[-5.551115123125783 * 10 ** -17, 'x2_gnb_dummy'],

[0.45030303030303037, 'x1_knn_onehot'],
[0.46707070707070697, 'x1_knn_onehot'],
[0.42686868686868684, 'x1_knn_onehot'],
[0.40262626262626255, 'x1_knn_onehot'],
[0.4628282828282828, 'x1_knn_onehot'],
[1.1102230246251565 * 10 ** -16, 'x2_knn_onehot'],
[0.0, 'x2_knn_onehot'],
[-2.220446049250313 * 10 ** -16, 'x2_knn_onehot'],
[-2.220446049250313 * 10 ** -16, 'x2_knn_onehot'],
[2.220446049250313 * 10 ** -16, 'x2_knn_onehot'],

[0.49070707070707076, 'x1_rfc_onehot'],
[0.5066666666666666, 'x1_rfc_onehot'],
[0.4993939393939393, 'x1_rfc_onehot'],
[0.49434343434343425, 'x1_rfc_onehot'],
[0.49919191919191924, 'x1_rfc_onehot'],
[0.0, 'x2_rfc_onehot'],
[0.0, 'x2_rfc_onehot'],
[0.0, 'x2_rfc_onehot'],
[0.0, 'x2_rfc_onehot'],
[0.0, 'x2_rfc_onehot'],

[0.10969696969696974, 'x1_gnb_onehot'],
[0.06363636363636366, 'x1_gnb_onehot'],
[0.06727272727272732, 'x1_gnb_onehot'],
[0.07272727272727275, 'x1_gnb_onehot'],
[0.078989898989899, 'x1_gnb_onehot'],
[-1.1102230246251565 * 10 ** -16, 'x2_gnb_onehot'],
[0.0, 'x2_gnb_onehot'],
[-5.551115123125783 * 10 ** -17, 'x2_gnb_onehot'],
[0.0, 'x2_gnb_onehot'],
[5.551115123125783 * 10 ** -17, 'x2_gnb_onehot'],

[0.48505050505050495, 'x1_knn_difference'],
[0.5042424242424243, 'x1_knn_difference'],
[0.4945454545454545, 'x1_knn_difference'],
[0.49070707070707065, 'x1_knn_difference'],
[0.5034343434343433, 'x1_knn_difference'],
[2.220446049250313 * 10 ** -16, 'x2_knn_difference'],
[0.0, 'x2_knn_difference'],
[2.220446049250313 * 10 ** -16, 'x2_knn_difference'],
[2.220446049250313 * 10 ** -16, 'x2_knn_difference'],
[0.0, 'x2_knn_difference'],

[0.4858585858585859, 'x1_rfc_difference'],
[0.49838383838383843, 'x1_rfc_difference'],
[0.4800000000000001, 'x1_rfc_difference'],
[0.5040404040404041, 'x1_rfc_difference'],
[0.47979797979797983, 'x1_rfc_difference'],
[2.220446049250313 * 10 ** -16, 'x2_rfc_difference'],
[0.0, 'x2_rfc_difference'],
[1.1102230246251565 * 10 ** -16, 'x2_rfc_difference'],
[0.0, 'x2_rfc_difference'],
[2.220446049250313 * 10 ** -16, 'x2_rfc_difference'],

[0.3585858585858586, 'x1_gnb_difference'],
[0.3660606060606061, 'x1_gnb_difference'],
[0.32444444444444437, 'x1_gnb_difference'],
[0.39252525252525255, 'x1_gnb_difference'],
[0.19494949494949498, 'x1_gnb_difference'],
[1.1102230246251565 * 10 ** -16, 'x2_gnb_difference'],
[2.220446049250313 * 10 ** -16, 'x2_gnb_difference'],
[2.220446049250313 * 10 ** -16, 'x2_gnb_difference'],
[-1.1102230246251565 * 10 ** -16, 'x2_gnb_difference'],
[0.0, 'x2_gnb_difference'],

[0.47232323232323237, 'x1_knn_basen'],
[0.4860606060606061, 'x1_knn_basen'],
[0.4727272727272728, 'x1_knn_basen'],
[0.473939393939394, 'x1_knn_basen'],
[0.48484848484848486, 'x1_knn_basen'],
[-1.1102230246251565 * 10 ** -16, 'x2_knn_basen'],
[-1.1102230246251565 * 10 ** -16, 'x2_knn_basen'],
[0.0, 'x2_knn_basen'],
[2.220446049250313 * 10 ** -16, 'x2_knn_basen'],
[1.1102230246251565 * 10 ** -16, 'x2_knn_basen'],

[0.49656565656565643, 'x1_rfc_basen'],
[0.4884848484848485, 'x1_rfc_basen'],
[0.49696969696969706, 'x1_rfc_basen'],
[0.4953535353535352, 'x1_rfc_basen'],
[0.4997979797979798, 'x1_rfc_basen'],
[0.0, 'x2_rfc_basen'],
[0.0, 'x2_rfc_basen'],
[0.0, 'x2_rfc_basen'],
[0.0, 'x2_rfc_basen'],
[0.0, 'x2_rfc_basen'],

[0.4185858585858586, 'x1_gnb_basen'],
[0.3909090909090909, 'x1_gnb_basen'],
[0.43070707070707065, 'x1_gnb_basen'],
[0.4052525252525253, 'x1_gnb_basen'],
[0.4032323232323232, 'x1_gnb_basen'],
[0.0, 'x2_gnb_basen'],
[2.220446049250313 * 10 ** -16, 'x2_gnb_basen'],
[-2.220446049250313 * 10 ** -16, 'x2_gnb_basen'],
[-1.1102230246251565 * 10 ** -16, 'x2_gnb_basen'],
[0.0, 'x2_gnb_basen'],

[0.47575757575757577, 'x1_knn_binary'],
[0.47111111111111104, 'x1_knn_binary'],
[0.4808080808080809, 'x1_knn_binary'],
[0.47191919191919196, 'x1_knn_binary'],
[0.47050505050505054, 'x1_knn_binary'],
[2.220446049250313 * 10 ** -16, 'x2_knn_binary'],
[-1.1102230246251565 * 10 ** -16, 'x2_knn_binary'],
[0.0, 'x2_knn_binary'],
[0.0, 'x2_knn_binary'],
[-1.1102230246251565 * 10 ** -16, 'x2_knn_binary'],

[0.49616161616161614, 'x1_rfc_binary'],
[0.4943434343434343, 'x1_rfc_binary'],
[0.49737373737373747, 'x1_rfc_binary'],
[0.49575757575757584, 'x1_rfc_binary'],
[0.49494949494949503, 'x1_rfc_binary'],
[1.1102230246251565 * 10 ** -16, 'x2_rfc_binary'],
[2.220446049250313 * 10 ** -16, 'x2_rfc_binary'],
[0.0, 'x2_rfc_binary'],
[0.0, 'x2_rfc_binary'],
[0.0, 'x2_rfc_binary'],

[0.3991919191919193, 'x1_gnb_binary'],
[0.4070707070707071, 'x1_gnb_binary'],
[0.44020202020202015, 'x1_gnb_binary'],
[0.37535353535353544, 'x1_gnb_binary'],
[0.4234343434343435, 'x1_gnb_binary'],
[-2.220446049250313 * 10 ** -16, 'x2_gnb_binary'],
[0.0, 'x2_gnb_binary'],
[2.220446049250313 * 10 ** -16, 'x2_gnb_binary'],
[1.1102230246251565 * 10 ** -16, 'x2_gnb_binary'],
[1.1102230246251565 * 10 ** -16, 'x2_gnb_binary'],

[0.45212121212121203, 'x1_knn_helmert'],
[0.4258585858585858, 'x1_knn_helmert'],
[0.43838383838383843, 'x1_knn_helmert'],
[0.4422222222222222, 'x1_knn_helmert'],
[0.4307070707070706, 'x1_knn_helmert'],
[-1.1102230246251565 * 10 ** -16, 'x2_knn_helmert'],
[-2.220446049250313 * 10 ** -16, 'x2_knn_helmert'],
[0.0, 'x2_knn_helmert'],
[1.1102230246251565 * 10 ** -16, 'x2_knn_helmert'],
[0.0, 'x2_knn_helmert'],

[0.4953535353535353, 'x1_rfc_helmert'],
[0.4947474747474748, 'x1_rfc_helmert'],
[0.5070707070707071, 'x1_rfc_helmert'],
[0.5018181818181818, 'x1_rfc_helmert'],
[0.5111111111111111, 'x1_rfc_helmert'],
[0.0, 'x2_rfc_helmert'],
[0.0, 'x2_rfc_helmert'],
[0.0, 'x2_rfc_helmert'],
[0.0, 'x2_rfc_helmert'],
[0.0, 'x2_rfc_helmert'],

[0.08383838383838382, 'x1_gnb_helmert'],
[0.06646464646464645, 'x1_gnb_helmert'],
[0.05656565656565654, 'x1_gnb_helmert'],
[0.0915151515151515, 'x1_gnb_helmert'],
[0.0565656565656566, 'x1_gnb_helmert'],
[-5.551115123125783 * 10 ** -17, 'x2_gnb_helmert'],
[-5.551115123125783 * 10 ** -17, 'x2_gnb_helmert'],
[5.551115123125783 * 10 ** -17, 'x2_gnb_helmert'],
[-1.1102230246251565 * 10 ** -16, 'x2_gnb_helmert'],
[0.0, 'x2_gnb_helmert'],

[0.4686868686868687, 'x1_knn_sum'],
[0.4509090909090909, 'x1_knn_sum'],
[0.45737373737373743, 'x1_knn_sum'],
[0.47191919191919196, 'x1_knn_sum'],
[0.4676767676767677, 'x1_knn_sum'],
[0.0, 'x2_knn_sum'],
[0.0, 'x2_knn_sum'],
[-2.220446049250313 * 10 ** -16, 'x2_knn_sum'],
[2.220446049250313 * 10 ** -16, 'x2_knn_sum'],
[2.220446049250313 * 10 ** -16, 'x2_knn_sum'],

[0.49737373737373736, 'x1_rfc_sum'],
[0.4947474747474746, 'x1_rfc_sum'],
[0.5008080808080807, 'x1_rfc_sum'],
[0.4917171717171718, 'x1_rfc_sum'],
[0.5107070707070707, 'x1_rfc_sum'],
[0.0, 'x2_rfc_sum'],
[0.0, 'x2_rfc_sum'],
[0.0, 'x2_rfc_sum'],
[0.0, 'x2_rfc_sum'],
[0.0, 'x2_rfc_sum'],
[0.2317171717171717, 'x1_gnb_sum'],
[0.3149494949494949, 'x1_gnb_sum'],
[0.1963636363636364, 'x1_gnb_sum'],
[0.25151515151515147, 'x1_gnb_sum'],
[0.17797979797979802, 'x1_gnb_sum'],
[-1.1102230246251565 * 10 ** -16, 'x2_gnb_sum'],
[0.0, 'x2_gnb_sum'],
[-1.1102230246251565 * 10 ** -16, 'x2_gnb_sum'],
[0.0, 'x2_gnb_sum'],
[-1.1102230246251565 * 10 ** -16, 'x2_gnb_sum']
], columns=columns)

data_dummy_columns = ['x1_knn','x2_knn','x1_rfc','x2_rfc','x1_gnb','x2_gnb']
data_dummy = [
[0.4868686868686869,-1.1102230246251565 * 10 ** -16,0.498989898989899,0.0,0.03959595959595957,5.551115123125783 * 10 ** -17],
[0.4507070707070707,2.220446049250313 * 10 ** -16,0.48484848484848486,0.0,0.07515151515151519,0.0],
[0.4709090909090909,-2.220446049250313 * 10 ** -16,0.49696969696969684,0.0,0.07313131313131316,0.0],
[0.4743434343434344,-2.220446049250313 * 10 ** -16,0.5006060606060606,0.0,0.09171717171717175,0.0],
[0.48202020202020207,2.220446049250313 * 10 ** -16,0.5006060606060607,0.0,0.10545454545454541,-5.551115123125783 * 10 ** -17],
]
df_dummy = pd.DataFrame(data_dummy, columns=data_dummy_columns)

data_onehot_columns = ['x1_knn','x2_knn','x1_rfc','x2_rfc','x1_gnb','x2_gnb']
data_onehot = [
[0.45030303030303037,1.1102230246251565 * 10 ** -16,0.49070707070707076,0.0,0.10969696969696974,-1.1102230246251565 * 10 ** -16],
[0.46707070707070697,0.0,0.5066666666666666,0.0,0.06363636363636366,0.0],
[0.42686868686868684,-2.220446049250313 * 10 ** -16,0.4993939393939393,0.0,0.06727272727272732,-5.551115123125783 * 10 ** -17],
[0.40262626262626255,-2.220446049250313 * 10 ** -16,0.49434343434343425,0.0,0.07272727272727275,0.0],
[0.4628282828282828,2.220446049250313 * 10 ** -16,0.49919191919191924,0.0,0.078989898989899,5.551115123125783 * 10 ** -17],
]
df_onehot = pd.DataFrame(data_onehot, columns=data_onehot_columns)

data_difference_columns = ['x1_knn','x2_knn','x1_rfc','x2_rfc','x1_gnb','x2_gnb']
data_difference = [
[0.48505050505050495,2.220446049250313 * 10 ** -16,0.4858585858585859,2.220446049250313 * 10 ** -16,0.3585858585858586,1.1102230246251565 * 10 ** -16],
[0.5042424242424243,0.0,0.49838383838383843,0.0,0.3660606060606061,2.220446049250313 * 10 ** -16],
[0.4945454545454545,2.220446049250313 * 10 ** -16,0.4800000000000001,1.1102230246251565 * 10 ** -16,0.32444444444444437,2.220446049250313 * 10 ** -16],
[0.49070707070707065,2.220446049250313 * 10 ** -16,0.5040404040404041,0.0,0.39252525252525255,-1.1102230246251565 * 10 ** -16],
[0.5034343434343433,0.0,0.47979797979797983,2.220446049250313 * 10 ** -16,0.19494949494949498,0.0],
]
df_difference = pd.DataFrame(data_difference, columns=data_difference_columns)

data_basen_columns = ['x1_knn','x2_knn','x1_rfc','x2_rfc','x1_gnb','x2_gnb']
data_basen = [
[0.47232323232323237,-1.1102230246251565 * 10 ** -16,0.49656565656565643,0.0,0.4185858585858586,0.0],
[0.4860606060606061,-1.1102230246251565 * 10 ** -16,0.4884848484848485,0.0,0.3909090909090909,2.220446049250313 * 10 ** -16],
[0.4727272727272728,0.0,0.49696969696969706,0.0,0.43070707070707065,-2.220446049250313 * 10 ** -16],
[0.473939393939394,2.220446049250313 * 10 ** -16,0.4953535353535352,0.0,0.4052525252525253,-1.1102230246251565 * 10 ** -16],
[0.48484848484848486,1.1102230246251565 * 10 ** -16,0.4997979797979798,0.0,0.4032323232323232,0.0],
]
df_basen = pd.DataFrame(data_basen, columns=data_basen_columns)

data_binary_columns = ['x1_knn','x2_knn','x1_rfc','x2_rfc','x1_gnb','x2_gnb']
data_binary = [
[0.47575757575757577,2.220446049250313 * 10 ** -16,0.49616161616161614,1.1102230246251565 * 10 ** -16,0.3991919191919193,-2.220446049250313 * 10 ** -16],
[0.47111111111111104,-1.1102230246251565 * 10 ** -16,0.4943434343434343,2.220446049250313 * 10 ** -16,0.4070707070707071,0.0],
[0.4808080808080809,0.0,0.49737373737373747,0.0,0.44020202020202015,2.220446049250313 * 10 ** -16],
[0.47191919191919196,0.0,0.49575757575757584,0.0,0.37535353535353544,1.1102230246251565 * 10 ** -16],
[0.47050505050505054,-1.1102230246251565 * 10 ** -16,0.49494949494949503,0.0,0.4234343434343435,1.1102230246251565 * 10 ** -16],
]
df_binary = pd.DataFrame(data_binary, columns=data_binary_columns)

data_helmert_columns = ['x1_knn','x2_knn','x1_rfc','x2_rfc','x1_gnb','x2_gnb']
data_helmert = [
[0.45212121212121203,-1.1102230246251565 * 10 ** -16,0.4953535353535353,0.0,0.08383838383838382,-5.551115123125783 * 10 ** -17],
[0.4258585858585858,-2.220446049250313 * 10 ** -16,0.4947474747474748,0.0,0.06646464646464645,-5.551115123125783 * 10 ** -17],
[0.43838383838383843,0.0,0.5070707070707071,0.0,0.05656565656565654,5.551115123125783 * 10 ** -17],
[0.4422222222222222,1.1102230246251565 * 10 ** -16,0.5018181818181818,0.0,0.0915151515151515,-1.1102230246251565 * 10 ** -16],
[0.4307070707070706,0.0,0.5111111111111111,0.0,0.0565656565656566,0.0]
]
df_helmert = pd.DataFrame(data_helmert, columns=data_helmert_columns)

data_sum_columns = ['x1_knn','x2_knn','x1_rfc','x2_rfc','x1_gnb','x2_gnb']
data_sum = [
[0.4686868686868687,0.0,0.49737373737373736,0.0,0.2317171717171717,-1.1102230246251565 * 10 ** -16],
[0.4509090909090909,0.0,0.4947474747474746,0.0,0.3149494949494949,0.0],
[0.45737373737373743,-2.220446049250313 * 10 ** -16,0.5008080808080807,0.0,0.1963636363636364,-1.1102230246251565 * 10 ** -16],
[0.47191919191919196,2.220446049250313 * 10 ** -16,0.4917171717171718,0.0,0.25151515151515147,0.0],
[0.4676767676767677,2.220446049250313 * 10 ** -16,0.5107070707070707,0.0,0.17797979797979802,-1.1102230246251565 * 10 ** -16],
]
df_sum = pd.DataFrame(data_sum, columns=data_sum_columns)

# df_dummy.boxplot(rot=90, figsize=cm2inch(8, 8))
# df_onehot.boxplot(rot=90, figsize=cm2inch(8, 8))
# df_basen.boxplot(rot=90, figsize=cm2inch(8, 8))
# df_binary.boxplot(rot=90, figsize=cm2inch(8, 8))
# df_difference.boxplot(rot=90, figsize=cm2inch(8, 8))
# df_helmert.boxplot(rot=90, figsize=cm2inch(8, 8))
df_sum.boxplot(rot=90, figsize=cm2inch(8, 8))
plt.subplots_adjust(bottom=0.2)
plt.ylim(-0.1, 0.5)
# plt.show()
plt.savefig("./images/p100-permutation-importance-boxplot-sum.svg")


# ax = df.boxplot(
# column='permutation importance',
# by='labels',
# figsize=cm2inch(14.69, 10.5),
# rot=90,
# fontsize=6
# )
#
# ax.set_xlabel('')
#
# plt.suptitle("")
# plt.subplots_adjust(bottom=0.3)
#
# # plt.show()
# plt.savefig("./images/p100-permutation-importance-boxplot-dimensional.svg")
